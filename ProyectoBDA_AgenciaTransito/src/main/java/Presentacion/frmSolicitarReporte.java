/**
 *
 * Apr 7, 2023 9:28:56 PM
 *
 */
package Presentacion;

import Dominio.Licencia;
import Dominio.Persona;
import Dominio.Reportes;
import Dominio.Tramite;
import Persistencia.LicenciasDAO;
import Persistencia.PersonasDAO;
import Persistencia.PlacasDAO;
import Persistencia.TramitesDAO;
import com.github.lgooddatepicker.components.DatePicker;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperPrint;
import utilidades.EncriptadoCesar;
import utilidades.JasperReportes;

/**
 * Descripci√≥n de la clase: Clase que permite poder seleccionar las personas de
 * las cuales se desea consultar las placas y licencias
 *
 * @author Joel Antonio Lopez Cota ID:228926 y David de Jesus Sotelo Palafox
 * ID:229384
 */
public class frmSolicitarReporte extends javax.swing.JFrame {
    /**
     * Es el log.
     */
    private static final Logger LOG = Logger.getLogger(frmSolicitarReporte.class.getName());
    /**
     * Es la lista de las personas que generaron un tramite con el parametro del tipo.
     */
    private List<Persona> listaPersonas;
    /**
     * Es el objeto para acceder a la clase personasDAO.
     */
    private PersonasDAO personasDAO;
    /**
     * Es el objeto para acceder a la clase placasDAO.
     */
    private PlacasDAO placasDAO;
    /**
     * Es el objeto para acceder a la clase licenciasDAO.
     */
    private LicenciasDAO licenciasDAO;
    /**
     * Es el objeto para acceder a la clase tramitesDAO.
     */
    private TramitesDAO tramitesDAO;
    /**
     * Es el objeto para acceder a la clase jasperPrin.
     */
    private JasperPrint jasperPrint;
    private EncriptadoCesar encriptador = new EncriptadoCesar();

    /**
     * Creates new form frmSeleccionPersonas.
     */
    public frmSolicitarReporte() {
        initComponents();
        cargarOpcionesBusqueda();
        cargarTipoTramite();
        this.txtCampoNombre.setEnabled(false);
        this.dpFechaFin.setEnabled(false);
        this.dpFechaInicio.setEnabled(false);
        this.cbxTipoTramite.setEnabled(false);
        this.btnGenerarReporte.setEnabled(false);
        this.personasDAO = new PersonasDAO();
        this.licenciasDAO = new LicenciasDAO();
        this.placasDAO = new PlacasDAO();
        this.tramitesDAO = new TramitesDAO();
        this.btnExportar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTitulo = new javax.swing.JPanel();
        txtSolicitarPlacas = new javax.swing.JLabel();
        pnlFondo = new javax.swing.JPanel();
        pnlComponentes = new javax.swing.JPanel();
        cbxTipoConsulta = new javax.swing.JComboBox<>();
        pnlConsultas = new javax.swing.JPanel();
        dpFechaInicio = new com.github.lgooddatepicker.components.DatePicker();
        dpFechaFin = new com.github.lgooddatepicker.components.DatePicker();
        txtFechaFin = new javax.swing.JLabel();
        txtFechaInicio = new javax.swing.JLabel();
        txtCampoNombre = new javax.swing.JTextField();
        txtNombre = new javax.swing.JLabel();
        txtTipoTramite = new javax.swing.JLabel();
        cbxTipoTramite = new javax.swing.JComboBox<>();
        btnGenerarReporte = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reportes");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pnlTitulo.setBackground(new java.awt.Color(117, 37, 37));
        pnlTitulo.setPreferredSize(new java.awt.Dimension(221, 66));

        txtSolicitarPlacas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtSolicitarPlacas.setText("Reportes");
        txtSolicitarPlacas.setBackground(new java.awt.Color(0, 0, 0));
        txtSolicitarPlacas.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        txtSolicitarPlacas.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout pnlTituloLayout = new javax.swing.GroupLayout(pnlTitulo);
        pnlTitulo.setLayout(pnlTituloLayout);
        pnlTituloLayout.setHorizontalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSolicitarPlacas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        pnlTituloLayout.setVerticalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSolicitarPlacas, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pnlFondo.setBackground(new java.awt.Color(255, 255, 255));

        pnlComponentes.setBackground(new java.awt.Color(255, 204, 153));

        cbxTipoConsulta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTipoConsulta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxTipoConsultaItemStateChanged(evt);
            }
        });
        cbxTipoConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoConsultaActionPerformed(evt);
            }
        });

        pnlConsultas.setBackground(new java.awt.Color(255, 204, 153));

        dpFechaInicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dpFechaInicioMouseClicked(evt);
            }
        });

        txtFechaFin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtFechaFin.setText("Fecha Fin");
        txtFechaFin.setBackground(new java.awt.Color(0, 0, 0));
        txtFechaFin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtFechaFin.setForeground(new java.awt.Color(0, 0, 0));

        txtFechaInicio.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtFechaInicio.setText("Fecha Inicio");
        txtFechaInicio.setBackground(new java.awt.Color(0, 0, 0));
        txtFechaInicio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtFechaInicio.setForeground(new java.awt.Color(0, 0, 0));

        txtCampoNombre.setBackground(new java.awt.Color(255, 255, 255));
        txtCampoNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCampoNombreActionPerformed(evt);
            }
        });
        txtCampoNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCampoNombreKeyTyped(evt);
            }
        });

        txtNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtNombre.setText("Nombre");
        txtNombre.setBackground(new java.awt.Color(0, 0, 0));
        txtNombre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));

        txtTipoTramite.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtTipoTramite.setText("Tipo Tramite");
        txtTipoTramite.setBackground(new java.awt.Color(0, 0, 0));
        txtTipoTramite.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtTipoTramite.setForeground(new java.awt.Color(0, 0, 0));

        cbxTipoTramite.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTipoTramite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxTipoTramiteItemStateChanged(evt);
            }
        });

        btnGenerarReporte.setText("Buscar");
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConsultasLayout = new javax.swing.GroupLayout(pnlConsultas);
        pnlConsultas.setLayout(pnlConsultasLayout);
        pnlConsultasLayout.setHorizontalGroup(
            pnlConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConsultasLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(pnlConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombre)
                    .addComponent(txtTipoTramite)
                    .addComponent(cbxTipoTramite, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlConsultasLayout.createSequentialGroup()
                        .addGroup(pnlConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCampoNombre, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dpFechaInicio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFechaInicio, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(pnlConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFechaFin)
                            .addComponent(dpFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(70, Short.MAX_VALUE))
            .addGroup(pnlConsultasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGenerarReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        pnlConsultasLayout.setVerticalGroup(
            pnlConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConsultasLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(txtNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCampoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFechaFin)
                    .addComponent(txtFechaInicio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dpFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dpFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(txtTipoTramite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxTipoTramite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 24, Short.MAX_VALUE)
                .addComponent(btnGenerarReporte))
        );

        btnExportar.setText("Exportar a PDF");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlComponentesLayout = new javax.swing.GroupLayout(pnlComponentes);
        pnlComponentes.setLayout(pnlComponentesLayout);
        pnlComponentesLayout.setHorizontalGroup(
            pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComponentesLayout.createSequentialGroup()
                .addGroup(pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlComponentesLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(cbxTipoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExportar))
                    .addGroup(pnlComponentesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlComponentesLayout.setVerticalGroup(
            pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComponentesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxTipoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlFondoLayout = new javax.swing.GroupLayout(pnlFondo);
        pnlFondo.setLayout(pnlFondoLayout);
        pnlFondoLayout.setHorizontalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlComponentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlFondoLayout.setVerticalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(pnlComponentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbxTipoConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoConsultaActionPerformed

    }//GEN-LAST:event_cbxTipoConsultaActionPerformed

    private void cbxTipoConsultaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxTipoConsultaItemStateChanged
        try {
            switch (this.cbxTipoConsulta.getModel().getSelectedItem().toString()) {
                case "NOMBRE":
                    this.txtCampoNombre.setEnabled(true);
                    this.dpFechaFin.setEnabled(false);
                    this.dpFechaInicio.setEnabled(false);
                    this.cbxTipoTramite.setEnabled(false);
                    this.btnGenerarReporte.setEnabled(true);
                    break;
                case "PERIODO":
                    this.txtCampoNombre.setEnabled(false);
                    this.dpFechaFin.setEnabled(true);
                    this.dpFechaInicio.setEnabled(true);
                    this.cbxTipoTramite.setEnabled(false);
                    this.btnGenerarReporte.setEnabled(true);
                    break;
                case "TIPO TRAMITE":
                    this.txtCampoNombre.setEnabled(false);
                    this.dpFechaFin.setEnabled(false);
                    this.dpFechaInicio.setEnabled(false);
                    this.cbxTipoTramite.setEnabled(true);
                    this.btnGenerarReporte.setEnabled(false);
                    break;
            }
        } catch (NullPointerException nul) {
            nul.getMessage();

        }
    }//GEN-LAST:event_cbxTipoConsultaItemStateChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        new frmMenu().setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void btnGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReporteActionPerformed
        try {
            generarReporte();
            this.btnExportar.setEnabled(true);
        } catch (JRException ex) {
            Logger.getLogger(frmSolicitarReporte.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmSolicitarReporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenerarReporteActionPerformed

    private void txtCampoNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCampoNombreActionPerformed
    }//GEN-LAST:event_txtCampoNombreActionPerformed

    private void txtCampoNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCampoNombreKeyTyped
        validacionCamposAlfabeto(evt);
    }//GEN-LAST:event_txtCampoNombreKeyTyped

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        try {
            exportarReporte();
            JOptionPane.showMessageDialog(this, "Se ha generado el reporte");
            abrirCarpeta();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmSolicitarReporte.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JRException ex) {
            Logger.getLogger(frmSolicitarReporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void dpFechaInicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dpFechaInicioMouseClicked
    }//GEN-LAST:event_dpFechaInicioMouseClicked

    private void cbxTipoTramiteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxTipoTramiteItemStateChanged
        if (this.cbxTipoTramite.getModel().getSelectedItem() != "INDIQUE El TIPO") {
            this.btnGenerarReporte.setEnabled(true);
        } else {
            this.btnGenerarReporte.setEnabled(false);
        }
    }//GEN-LAST:event_cbxTipoTramiteItemStateChanged
    /**
     * Metodo para cargar las opciones de reporte
     */
    private void cargarOpcionesBusqueda() {
        this.cbxTipoConsulta.removeAllItems();
        this.cbxTipoConsulta.addItem("INDIQUE OPCION DE REPORTE");
        this.cbxTipoConsulta.addItem("NOMBRE");
        this.cbxTipoConsulta.addItem("PERIODO");
        this.cbxTipoConsulta.addItem("TIPO TRAMITE");
    }

    /**
     *
     * Metodo para hacer las validaciones del campo alfabetico.
     *
     * @param evt
     */
    private void validacionCamposAlfabeto(java.awt.event.KeyEvent evt) {
        char txt = evt.getKeyChar();
        if (!(Character.isAlphabetic(txt) || txt == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }

    /**
     *
     * Metodo para cargar el tipo de tramite.
     */
    private void cargarTipoTramite() {
        this.cbxTipoTramite.removeAllItems();
        this.cbxTipoTramite.addItem("INDIQUE El TIPO");
        this.cbxTipoTramite.addItem("LICENCIA");
        this.cbxTipoTramite.addItem("PLACAS");
    }

    /**
     * Metodo para generar el reporte
     *
     * @throws JRException se lanza si no se pudo generar el jasper report
     * @throws FileNotFoundException se lanza si no se encontro el archivo
     */
    private void generarReporte() throws JRException, FileNotFoundException {
        String opcion = this.cbxTipoConsulta.getModel().getSelectedItem().toString();
        JasperReportes reportes = new JasperReportes();
        switch (opcion) {
            case "NOMBRE":
                listaPersonas = personasDAO.buscarPersonasPorNombre(encriptador.setEncriptado(this.txtCampoNombre.getText()));
                if (listaPersonas != null) {
                    List<Tramite> listaTramites = tramitesDAO.consultaListaTramitesNombre(encriptador.setEncriptado(this.txtCampoNombre.getText()));
                    jasperPrint = reportes.generarReporte(this.generarListaReporte(listaTramites));
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron resultados");
                }
                break;
            case "PERIODO":
                List<Tramite> listaTramites = tramitesDAO.consultarListaTramitesPorFechas(convertirFecha(this.dpFechaInicio), convertirFecha(this.dpFechaFin));
                if (!listaTramites.isEmpty()) {
                    jasperPrint = reportes.generarReporte(this.generarListaReporte(listaTramites));
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontraron resultados");
                }
                break;
            case "TIPO TRAMITE":
                List<Tramite> lista = tramitesDAO.consultaListaTramites();
                List<Tramite> listaLicencias = new ArrayList<>();
                List<Tramite> listaPlacas = new ArrayList<>();
                for (Tramite tramite : lista) {
                    if (tramite instanceof Licencia) {
                        listaLicencias.add(tramite);
                    } else {
                        listaPlacas.add(tramite);
                    }
                }
                if (this.cbxTipoTramite.getModel().getSelectedItem() == "LICENCIA") {
                    if (!listaLicencias.isEmpty()) {
                        jasperPrint = reportes.generarReporte(this.generarListaReporte(listaLicencias));
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontraron resultados");
                    }
                } else if (this.cbxTipoTramite.getModel().getSelectedItem() == "PLACAS") {
                    if (!listaPlacas.isEmpty()) {
                        jasperPrint = reportes.generarReporte(this.generarListaReporte(listaPlacas));
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontraron resultados");
                    }
                }
                break;
        }
    }

    /**
     * Metodo para generar la lista de reportes
     *
     * @param listaTramites es la lista de todos los tramites correspondientes
     * al parametro
     * @return la lista de reportes
     */
    private List<Reportes> generarListaReporte(List<Tramite> listaTramites) {
        List<Reportes> listaInfo = new ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Reportes reporte;
        String tipoTramite;
        for (Tramite listaTramite : listaTramites) {
            if (listaTramite instanceof Licencia) {
                tipoTramite = "Licencia";
            } else {
                tipoTramite = "Placa";
            }

            listaTramite.getPersona().setNombreCompleto(encriptador.getDesencriptado(listaTramite.getPersona().getNombreCompleto()));
            reporte = new Reportes(listaTramite.getPersona().getNombreCompleto(), tipoTramite, sdf.format(listaTramite.getFechaExpedicion().getTime()), listaTramite.getCosto());
            listaInfo.add(reporte);
            listaTramite.getPersona().setNombreCompleto(encriptador.setEncriptado(listaTramite.getPersona().getNombreCompleto()));
        }
        return listaInfo;
    }

    /**
     * Metodo para exportar el documento
     *
     * @throws FileNotFoundException se lanza si no encuentra el archivo
     * @throws JRException se lanza si hubo error en el jasper reports
     */
    private void exportarReporte() throws FileNotFoundException, JRException {
        JasperReportes reportes = new JasperReportes();
        reportes.exportarReporte(jasperPrint);
    }

    /**
     * Metodo para abrir la carpeta en la cual se encuentra el documento
     */
    private void abrirCarpeta() {
        String rutaArchivo = "src/ReporteTramites/";
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            File archivo = new File(rutaArchivo);
            if (archivo.exists()) {
                try {
                    desktop.open(archivo);
                } catch (IOException e) {
                    System.out.println("No se pudo abrir el archivo: " + e.getMessage());
                }
            } else {
                System.out.println("El archivo no existe.");
            }
        } else {
            System.out.println("La apertura de archivos no es compatible con el escritorio actual.");
        }
    }

    /**
     * Metodo que permite convertir un date picker en date
     *
     * @param date es la fecha seleccionada en el date picker
     * @return la fecha en tipo Date
     */
    private Date convertirFecha(DatePicker date) {
        LocalDate localDate = date.getDate();
        if (localDate != null) {
            Date dateNew = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
            return dateNew;
        } else {
            System.out.println("Ninguna fecha seleccionada.");
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnGenerarReporte;
    private javax.swing.JComboBox<String> cbxTipoConsulta;
    private javax.swing.JComboBox<String> cbxTipoTramite;
    private com.github.lgooddatepicker.components.DatePicker dpFechaFin;
    private com.github.lgooddatepicker.components.DatePicker dpFechaInicio;
    private javax.swing.JPanel pnlComponentes;
    private javax.swing.JPanel pnlConsultas;
    private javax.swing.JPanel pnlFondo;
    private javax.swing.JPanel pnlTitulo;
    private javax.swing.JTextField txtCampoNombre;
    private javax.swing.JLabel txtFechaFin;
    private javax.swing.JLabel txtFechaInicio;
    private javax.swing.JLabel txtNombre;
    private javax.swing.JLabel txtSolicitarPlacas;
    private javax.swing.JLabel txtTipoTramite;
    // End of variables declaration//GEN-END:variables

}
